@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using desafio_blazor_balta.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityRedirectManager RedirectManager

<PageTitle>Sua conta</PageTitle>

<h3>Perfil</h3>
<StatusMessage />

<div class="row" style="margin-top: 15px">
      <div class="col-md-6">
            <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
                  <DataAnnotationsValidator />
                  <ValidationSummary class="text-danger" role="alert" />
                  <div class="form-floating mb-3">
                        <input type="text" value="@username" class="form-control" placeholder="Por favor, escolha seu nome de usuário." disabled />
                        <label for="username" class="form-label">Nome de usuário</label>
                  </div>
                  <div class="form-floating mb-3 input-group">
                        <input type="text" value="@email" class="form-control" placeholder="Por favor, digite seu email." disabled />
                        <label for="email" class="form-label">Email</label>
                  </div>
                  <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Por favor, digite seu número de telefone." />
                        <label for="phone-number" class="form-label">Número de celular</label>
                        <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                  </div>
                  <button type="submit" class="w-100 btn btn-lg btn-primary">Salvar</button>
            </EditForm>
      </div>
</div>

@code {
      private ApplicationUser user = default!;
      private string? username;
      private string? email;
      private string? phoneNumber;

      [CascadingParameter]
      private HttpContext HttpContext { get; set; } = default!;

      [SupplyParameterFromForm]
      private InputModel Input { get; set; } = new();

      protected override async Task OnInitializedAsync()
      {
            user = await UserAccessor.GetRequiredUserAsync(HttpContext);
            username = await UserManager.GetUserNameAsync(user);
            email = await UserManager.GetEmailAsync(user);
            phoneNumber = await UserManager.GetPhoneNumberAsync(user);

            Input.PhoneNumber ??= phoneNumber;
      }

      private async Task OnValidSubmitAsync()
      {
            if(Input.PhoneNumber != phoneNumber)
            {
                  var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
                  if(!setPhoneResult.Succeeded)
                  {
                        RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
                  }
            }

            await SignInManager.RefreshSignInAsync(user);
            RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
      }

      private sealed class InputModel
      {
            [Phone]
            [Display(Name = "Phone number")]
            public string? PhoneNumber { get; set; }
      }
}
